import time
import pandas as pd
import numpy as np

CITY_DATA = {'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv'}

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input('Enter the City Name (chicago, new york city, washington) : \n ')
        if city.lower() not in CITY_DATA:
            print('The City Name should be either "chicago, new york city or washington" . Please Retry \n ')
            continue
        else:
            break
    # TO DO: get user input for month (all, january, february, ... , june)
    while True:
        month = input('Enter the Month Name (all, january, february, march , april , may , june) : \n ')
        months = ['january', 'february', 'march', 'april', 'may', 'june','all']
        if month.lower() not in months:
            print('The Month Name should be of - "all, january, february, march , april , may , june" . Please Retry \n ')
            continue
        else:
            break
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input('Enter the Day Name (all, monday, tuesday, wednesday, thursday, friday, saturday, sunday) : \n ')
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday','sunday','all']
        if day.lower() not in days:
            print(" The Day Name should be of - all, monday, tuesday, wednesday, thursday, friday, saturday , sunday . Please Retry  \n ")
            continue
        else:
            break
    print('-'*40)
    return city.lower(), month, day
def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - pandas DataFrame containing city data filtered by month and day
    """
    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])
    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1        
        # filter by month to create the new dataframe
        df = df[(df['month']== (month))]       
    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        day_title = day.title()
        df = df[(df['day_of_week']==day_title)]        
    return df

def time_stats(df):

    """Displays statistics on the most frequent times of travel."""
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    # TO DO: display the most common month
    popular_month_index = df['month'].mode()[0]
    month_list = ['january', 'february', 'march', 'april', 'may', 'june']
    popular_month_name = month_list[popular_month_index - 1]
    print("Most Common Month is {} \n ".format(popular_month_name))
    # TO DO: display the most common day of week
    popular_day_of_week = df['day_of_week'].mode()[0]
    print("Most Common Day of Week is {} \n ".format(popular_day_of_week))
    # TO DO: display the most common start hour
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    # extract hour from the Start Time column to create an hour column
    df['hour'] = df['Start Time'].dt.hour
    # find the most popular hour
    popular_hour = df['hour'].mode()[0]
    print("Most Popular Hour is " , popular_hour)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def station_stats(df):
    """Displays statistics on the most popular stations and trip."""
    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
    # TO DO: display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
    popular_start_station_trips = (df['Start Station']==popular_start_station).sum()
    print("Most commonly used start station {} and the number of trips made is {} \n ".format(popular_start_station,popular_start_station_trips))
    # TO DO: display most commonly used end station
    popular_end_station = df['End Station'].mode()[0]
    popular_end_station_trips = (df['End Station']==popular_end_station).sum()
    print("Most commonly used end station {} and the number of trips made is {} ".format(popular_end_station,popular_end_station_trips))
    # TO DO: display most frequent combination of start station and end station trip
    popular_start_end_station = df[['Start Station' , 'End Station']].mode()
    print("\nMost frequent combination of start station and end station trip \n {}".format(popular_start_end_station ))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""
    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print("Total Travel Time {} seconds ".format(total_travel_time))
    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print("Total Mean Time {} seconds ".format(mean_travel_time)) 
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def user_stats(df):
    """Displays statistics on bikeshare users."""
    print('\nCalculating User Stats...\n')
    start_time = time.time()
    # TO DO: Display counts of user types
    user_type_counts = df['User Type'].value_counts()
    print("Counts of user Types \n  {}".format(user_type_counts))
    # TO DO: Display counts of gender
    gender_counts = df['Gender'].value_counts()
    print("Counts of Gender Types \n {}".format(gender_counts))
    # TO DO: Display earliest, most recent, and most common year of birth
    earliest_birth_year = df['Birth Year'].dropna().min()
    most_recent_birth_year = df['Birth Year'].dropna().max()
    most_common_birth_year = df['Birth Year'].dropna().mode()[0]
    print("Earliest Year of Birth {} \n ".format(earliest_birth_year))
    print("Most Recent Year of Birth {} \n ".format(most_recent_birth_year))
    print("Most Common Year of Birth {}  \n ".format(most_common_birth_year))    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def main():
    while True:
        city, month, day = get_filters()
        print("Calculating the Descriptive Statistics for CITY : {} \n for the month : {} \n and for the Day of Week : {} \n".format(city,month,day))
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        if city.lower() == "chicago" or city.lower() == "new york city":
            user_stats(df)
        else:
            print("User Status is available only for Chicago and New York Cities . It is not available for Washington \n")
        restart = input('Would you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break

if __name__ == "__main__":
	main()
